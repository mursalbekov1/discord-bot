package bot

import (
	"fmt"
	"github.com/bwmarrin/discordgo"
	"log"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"
)

func checkNilErr(e error) {
	if e != nil {
		log.Fatal("Error message")
	}
}

var BotToken string

func Run() {
	sess, err := discordgo.New("Bot " + BotToken)
	checkNilErr(err)

	sess.AddHandler(newMessage)

	sess.Identify.Intents = discordgo.IntentsAllWithoutPrivileged

	err = sess.Open()
	if err != nil {
		log.Fatal(err)
	}
	defer sess.Close()

	fmt.Println("The bot is working!")

	sc := make(chan os.Signal, 1)
	signal.Notify(sc, syscall.SIGINT, syscall.SIGTERM, os.Interrupt)
	<-sc
}

func newMessage(session *discordgo.Session, message *discordgo.MessageCreate) {
	if message.Author.ID == session.State.User.ID {
		return
	}

	switch {
	case strings.HasPrefix(message.Content, "!info"):
		session.ChannelMessageSend(message.ChannelID, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å! ‚úèüìÑ\n"+
			"–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. \n\n "+
			"–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n"+
			"!remind - '–∏–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è' : '—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è' : '–≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è' ‚úÖ\n"+
			"!list - —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üìÑ\n"+
			"!delete - —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ -> '–∏–º—è' ‚ùå")
	case strings.HasPrefix(message.Content, "!remind"):
		isValid, name, description, remindTime := saveReminder(message, message.Content)
		if isValid {
			session.ChannelMessageSend(message.ChannelID, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

			reminderTimeParsed, err := time.Parse("15:04", remindTime)
			if err != nil {
				session.ChannelMessageSend(message.ChannelID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.")
				return
			}

			currentTime := time.Now()

			reminderTimeParsed = time.Date(currentTime.Year(), currentTime.Month(), currentTime.Day(), reminderTimeParsed.Hour(), reminderTimeParsed.Minute(), 0, 0, currentTime.Location())

			durationUntilReminder := reminderTimeParsed.Sub(currentTime)

			if durationUntilReminder <= 0 {
				session.ChannelMessageSend(message.ChannelID, "–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
				return
			}

			go func() {
				<-time.After(durationUntilReminder)

				session.ChannelMessageSend(message.ChannelID, fmt.Sprintf("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: %s - %s", name, description))
			}()
		} else {
			session.ChannelMessageSend(message.ChannelID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
		}
	case message.Content == "!list":
		listOfReminders(session, message)
	case strings.HasPrefix(message.Content, "!delete"):
		parts := strings.Fields(message.Content)
		log.Println(len(parts))
		if len(parts) == 2 {
			deleteReminder(session, message, parts[1])
		} else {
			session.ChannelMessageSend(message.ChannelID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !delete <–ò–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è>")
		}
	}
}
