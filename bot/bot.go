package bot

import (
	"fmt"
	"github.com/bwmarrin/discordgo"
	"log"
	"os"
	"os/signal"
	"syscall"
)

func checkNilErr(e error) {
	if e != nil {
		log.Fatal("Error message")
	}
}

var BotToken string

func Run() {
	sess, err := discordgo.New("Bot " + BotToken)
	checkNilErr(err)

	sess.AddHandler(newMessage)

	sess.Identify.Intents = discordgo.IntentsAllWithoutPrivileged

	err = sess.Open()
	if err != nil {
		log.Fatal(err)
	}
	defer sess.Close()

	fmt.Println("The bot is working!")

	sc := make(chan os.Signal, 1)
	signal.Notify(sc, syscall.SIGINT, syscall.SIGTERM, os.Interrupt)
	<-sc
}

func newMessage(session *discordgo.Session, message *discordgo.MessageCreate) {
	if message.Author.ID == session.State.User.ID {
		return
	}

	switch message.Content {
	case "!info":
		session.ChannelMessageSend(message.ChannelID, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å! ‚úèüìÑ\n"+
			"–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. \n\n "+
			"–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n"+
			"!remind - '–∏–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è' : '—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è' : '–≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è' ‚úÖ\n"+
			"!remindList - —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ üìÑ\n"+
			"!remindDelete - —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ -> '–∏–º—è' ‚ùå")
	case "!remind":
		session.ChannelMessageSend(message.ChannelID, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è, —Ç–µ–∫—Å—Ç –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–≤–æ–µ—Ç–æ—á–∏–µ–º. –ù–∞–ø—Ä–∏–º–µ—Ä: '–°–æ–Ω:–ù—É–∂–Ω–æ –ª–æ–∂–∏—Ç—å—Å—è —Å–ø–∞—Ç—å: 22:00' ‚úèüìÑ")
	case "!remindList":
		session.ChannelMessageSend(message.ChannelID, "")
	case "!remindCancel":
		session.ChannelMessageSend(message.ChannelID, "")
	}
}
